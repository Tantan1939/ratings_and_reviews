@model CustomerDataRatingsAndReviewsManagementSystem.Models.AccountRegistrationModel

@{
    ViewBag.Title = "RegisterAccount";
    Layout = "~/Views/Shared/_LoginLayout.cshtml";
}

<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Register Account</title>

    @*hide password animation and fonts*@
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>

    <script src="~/CustomJS/RegisterAccountJS.js"></script>
    <script src="~/Scripts/jquery-3.4.1.js"></script>
    <script src="~/Scripts/jquery.unobtrusive-ajax.js"></script>

    @* sweet alert sources *@
    <script src="~/Scripts/jquery-3.4.1.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/1.1.3/sweetalert.min.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/1.1.3/sweetalert.min.js"></script>

</head>

<body>

    @using (Html.BeginForm("RegisterAccount", "RegisterAccount", FormMethod.Post))
    {
        @Html.AntiForgeryToken()
        <br />
        <br />

        <div class="container-fluid">
            <div class="col-md-8 mx-auto wrapper align-items-center justify-content-center h-100">

                <div class="row">
                    <div class="col-md-6">
                        <div class="card login-form">
                            <div class="card-body">
                                <h4 class="card-title text-center">Register</h4>

                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                <div class="mb-3">
                                    <b> @Html.LabelFor(model => model.Username, htmlAttributes: new { @class = "form-label" }) </b>
                                    @Html.EditorFor(model => model.Username, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-danger" })
                                </div>

                                <div class="mb-3">
                                    <b> @Html.LabelFor(model => model.AccountPassword, htmlAttributes: new { @class = "form-label" }) </b>
                                    <div class="input-group">
                                        @Html.EditorFor(model => model.AccountPassword, new { htmlAttributes = new { @class = "form-control" } })
                                        <div class="input-group-append">
                                            <button id="show_password1" class="btn btn-primary" type="button">
                                                <span class="fa fa-eye-slash icon"></span>
                                            </button>
                                        </div>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.AccountPassword, "", new { @class = "text-danger" })
                                </div>

                                <div class="mb-3">
                                    <b> @Html.LabelFor(model => model.ConfirmPassword, htmlAttributes: new { @class = "form-label" }) </b>
                                    <div class="input-group">
                                        @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control" } })
                                        <div class="input-group-append">
                                            <button id="show_password2" class="btn btn-primary" type="button">
                                                <span class="fa fa-eye-slash icon"></span>
                                            </button>
                                        </div>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>

                    <br />

                    <div class="col-md-6">
                        <div class="card login-form">
                            <div class="card-body">

                                <div class="mb-3">
                                    <b> @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "form-label" }) </b>
                                    @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                                </div>

                                <div class="mb-3">
                                    <b> @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "form-label" }) </b>
                                    @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                                </div>

                                <div class="mb-3">
                                    <b> @Html.LabelFor(model => model.EmailAddress, htmlAttributes: new { @class = "form-label" }) </b>
                                    @Html.EditorFor(model => model.EmailAddress, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.EmailAddress, "", new { @class = "text-danger" })
                                </div>

                                <div class="mb-3">
                                    <b> @Html.LabelFor(model => model.HomeAddress, htmlAttributes: new { @class = "form-label" }) </b>
                                    @Html.EditorFor(model => model.HomeAddress, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.HomeAddress, "", new { @class = "text-danger" })
                                </div>

                                <div class="mb-3">
                                    <b> @Html.LabelFor(model => model.Age, htmlAttributes: new { @class = "form-label" }) </b>
                                    @Html.EditorFor(model => model.Age, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Age, "", new { @class = "text-danger" })
                                </div>

                                <div class="mb-3">
                                    <b> @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "form-label" }) </b>
                                    @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                                </div>

                                <div class="mb-3">
                                    <b> @Html.LabelFor(model => model.Region, htmlAttributes: new { @class = "form-label" }) </b>
                                    @Html.EditorFor(model => model.Region, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Region, "", new { @class = "text-danger" })
                                </div>

                                <div class="mb-3">
                                    <b> @Html.LabelFor(model => model.ZIPcode, htmlAttributes: new { @class = "form-label" }) </b>
                                    @Html.EditorFor(model => model.ZIPcode, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.ZIPcode, "", new { @class = "text-danger" })
                                </div>

                                <div class="mb-3">
                                    <b> @Html.LabelFor(model => model.SimNumber, htmlAttributes: new { @class = "form-label" }) </b>
                                    @Html.EditorFor(model => model.SimNumber, new { htmlAttributes = new { @class = "form-control", onkeypress = "return isNumber(event)" } })
                                    @Html.ValidationMessageFor(model => model.SimNumber, "", new { @class = "text-danger" })
                                </div>

                                <div class="sign-up mt-4">
                                    <input type="submit" class="btn btn-primary w-100" value="Register" />
                                    Already have an account? <a href="#" onclick="location.href='@Url.Action("Login", "MainLogin")'">Log in</a>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    @section scripts{
        <script src="~/Scripts/jquery.validate.min.js"></script>
        <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
        <script src="~/Scripts/jquery.unobtrusive-ajax.min.js"></script>
        <script type="text/javascript">

            function OnSuccess(response) {
            swal({
                title: "Registered Successfully",
                text: "",
                type: 'info',
                confirmButtonClass: 'btn-primary',
                confirmButtonText: 'Continue..'
            },
                function (isConfirm) {
                var url = '@Url.Action("Login", "MainLogin")';
                window.location.href = url;
                });
            }
            function OnFailure(response) {
                swal({
                    title: "Username already exist. Try a new one.",
                    text: "",
                    type: 'warning',
                    confirmButtonClass: 'btn-danger',
                    confirmButtonText: 'Edit'
                });
            }
            function OnAttempt(response) {
                swal({
                    title: "Kindly Fill all fields..",
                    text: "",
                    type: 'warning',
                    confirmButtonClass: 'btn-danger',
                    confirmButtonText: 'Continue..'
                });

            @*$(document).ready(function () {
                $("#btnSave").click(function () {
                    SaveItem();
                });
            });

            function ResetItem() {
                $("#Username").val("");
                $("#AccountPassword").val("");
                $("#ConfirmPassword").val("");
                $("#FirstName").val("");
                $("#LastName").val("");
                $("#EmailAddress").val("");
                $("#HomeAddress").val("");
                $("#Age").val("");
                $("#City").val("");
                $("#Region").val("");
                $("#ZIPcode").val("");
                $("#SimNumber").val("");
            }

            function SaveItem() {
                var formData = new FormData();
                formData.append("Username", $("#Username").val());
                formData.append("AccountPassword", $("#AccountPassword").val());
                formData.append("ConfirmPassword", $("#ConfirmPassword").val());
                formData.append("FirstName", $("#FirstName").val());
                formData.append("LastName", $("#LastName").val());
                formData.append("EmailAddress", $("#EmailAddress").val());
                formData.append("HomeAddress", $("#HomeAddress").val());
                formData.append("Age", $("#Age").val());
                formData.append("City", $("#City").val());
                formData.append("Region", $("#Region").val());
                formData.append("ZIPcode", $("#ZIPcode").val());
                formData.append("SimNumber", $("#SimNumber").val());
                $.ajax({
                    async: true,
                    dataType: 'JSON',
                    type: 'POST',
                    contentType: false,
                    processData: false,
                    url: '/RegisterAccount/RegisterAccount',
                    data: formData,
                    success: function (data) {
                        if (data.Success) {
                            swal({
                                title: data.Message,
                                text: "",
                                type: 'info',
                                confirmButtonClass: 'btn-primary',
                                confirmButtonText: 'Continue..'
                            },
                                function (isConfirm) {
                                    var url = '@Url.Action("Login", "MainLogin")';
                                    window.location.href = url;
                                });
                        }
                        else {
                            swal({
                                title: data.Message,
                                text: "",
                                type: 'warning',
                                confirmButtonClass: 'btn-danger',
                                confirmButtonText: 'Edit'
                            });
                        }
                    },
                    error: function () {
                        alert("Error Occurred! Try Again.");
                    }
                });
            }*@
        </script>
    }

</body>
</html>